{"version":3,"sources":["constant.js","message.js","utils.js"],"names":["FRAPPE_FILE_UPLOAD_ENDPOINT","updateMessage","window","frappe","_","showProgress","current","description","title","show_progress","_filename","name","uploadFileAsAttachment","file","docname","frm","formdata","FormData","append","fetch","headers","Accept","csrf_token","method","body","then","reload_doc","showError","error","hide_progress","throw","triggerDownload","uri","filename","evt","MouseEvent","view","bubbles","cancelable","a","document","createElement","setAttribute","dispatchEvent","getLanguageCode","language","toUpperCase"],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iCAAA,EAAA,MAAMA,EAA8B,0BAApC,QAAA,4BAAoC;;ACApC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAAA,MAAMC,EAAgBC,OAAOC,OAAOC,EAAE,2BAAtC,QAAA,cAAA;;ACgFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,gBAAA,QAAA,UAAA,QAAA,uBAAA,QAAA,kBAAA,EAhFP,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,aAOO,MAAMC,EAAe,CAACC,EAASC,KAC9BC,MAAAA,EAAQP,EAAd,cAEAC,OAAOC,OAAOM,cAAcD,EAAOF,EADrB,IACqCC,GAAa,IAqE3D,QAAA,aAAA,EA7DP,MAAMG,EAAaC,MAAYA,eASlBC,EAAyB,CAACC,EAAMC,EAASC,KAChDC,IAAAA,EAAW,IAAIC,SACnBD,EAASE,OAAO,aAAc,GAC9BF,EAASE,OAAO,SAAU,oBAC1BF,EAASE,OAAO,UAAW,iBAC3BF,EAASE,OAAO,UAAWJ,GAC3BE,EAASE,OAAO,OAAQL,EAAMH,EAAUI,IACxCK,MAAMnB,EAAD,4BAA8B,CACjCoB,QAAS,CACPC,OAAQ,mBACenB,sBAAAA,OAAOC,OAAOmB,YAEvCC,OAAQ,OACRC,KAAMR,IACLS,KAAK,KACNpB,EAAa,IAAK,QAClBU,EAAIW,gBAoCD,QAAA,uBAAA,EA5BA,MAAMC,EAAaC,IACxB1B,OAAOC,OAAO0B,gBACd3B,OAAOC,OAAO2B,MAAMF,IA0Bf,QAAA,UAAA,EAlBA,MAAMG,EAAkB,CAACC,EAAKC,KAC/BC,IAAAA,EAAM,IAAIC,WAAW,QAAS,CAChCC,KAAMlC,OACNmC,SAAS,EACTC,YAAY,IAEVC,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,aAAa,WAAYT,GAC3BM,EAAEG,aAAa,OAAQV,GACvBO,EAAEG,aAAa,SAAU,UACzBH,EAAEI,cAAcT,IAQX,QAAA,gBAAA,EAAA,MAAMU,EAAmBC,GACb,UAAbA,GAAqC,UAAbA,EACnB,KAIO,OAAbA,EACa,OAAbA,EACa,OAAbA,EACa,OAAbA,EAEMA,EAASC,cAEX,KAbF,QAAA,gBAAA","file":"utils.js","sourceRoot":"../../../src","sourcesContent":["export const FRAPPE_FILE_UPLOAD_ENDPOINT = \"/api/method/upload_file\";\n","export const updateMessage = window.frappe._(\"Uploading Swiss QR Bill\");\n","import { FRAPPE_FILE_UPLOAD_ENDPOINT } from \"./constant\";\nimport { updateMessage } from \"./message\";\n\n/**\n * Shows Progress Bar For Uploading QR Bill\n * @param {Number} current Current Progress\n * @param {String} description Desciption\n */\nexport const showProgress = (current, description) => {\n  const title = updateMessage;\n  const total = 100;\n  window.frappe.show_progress(title, current, total, description, true);\n};\n\n/**\n * Creates Filename For Uploading File\n * @param {String} name Name of File\n * @returns String\n */\nconst _filename = (name) => `${name}-QRBILL.pdf`;\n\n/**\n * Frappe Upload File As Attachment to\n * Frappe Cloud\n * @param {Blob} file PDF File Blob\n * @param {String} docname Document Name\n * @param {Object} frm Frappe Form Object\n */\nexport const uploadFileAsAttachment = (file, docname, frm) => {\n  let formdata = new FormData();\n  formdata.append(\"is_private\", 1);\n  formdata.append(\"folder\", \"Home/Attachments\");\n  formdata.append(\"doctype\", \"Sales Invoice\");\n  formdata.append(\"docname\", docname);\n  formdata.append(\"file\", file, _filename(docname));\n  fetch(FRAPPE_FILE_UPLOAD_ENDPOINT, {\n    headers: {\n      Accept: \"application/json\",\n      \"X-Frappe-CSRF-Token\": window.frappe.csrf_token,\n    },\n    method: \"POST\",\n    body: formdata,\n  }).then(() => {\n    showProgress(100, \"done\");\n    frm.reload_doc();\n  });\n};\n\n/**\n * Shows Error Alert\n * @param {String} error Error Message\n */\nexport const showError = (error) => {\n  window.frappe.hide_progress();\n  window.frappe.throw(error);\n};\n\n/**\n * Download File Name\n * @param {URL} uri URL to Set For Virtual Button\n * @param {String} filename File Name of Download\n */\nexport const triggerDownload = (uri, filename) => {\n  var evt = new MouseEvent(\"click\", {\n    view: window,\n    bubbles: false,\n    cancelable: true,\n  });\n  var a = document.createElement(\"a\");\n  a.setAttribute(\"download\", filename);\n  a.setAttribute(\"href\", uri);\n  a.setAttribute(\"target\", \"_blank\");\n  a.dispatchEvent(evt);\n};\n\n/**\n * Returns Language Code For Swiss QR Bill\n * @param {String} language Language\n * @returns {String} Returns Language Code For Download\n */\nexport const getLanguageCode = (language) => {\n  if (language === \"en-US\" || language === \"en-GB\") {\n    return \"EN\";\n  }\n\n  if (\n    (language === \"en\") |\n    (language === \"fr\") |\n    (language === \"it\") |\n    (language === \"de\")\n  ) {\n    return language.toUpperCase();\n  }\n  return \"DE\";\n};\n"]}